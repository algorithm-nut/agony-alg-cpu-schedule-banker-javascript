{
    "project": {},
    "files": {
        "banker-dom.js": {
            "name": "banker-dom.js",
            "modules": {},
            "classes": {
                "[banker-dom.js]": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "banker.js": {
            "name": "banker.js",
            "modules": {},
            "classes": {
                "[banker.js]": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "common.js": {
            "name": "common.js",
            "modules": {},
            "classes": {
                "[common.js]": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "cpu-dom.js": {
            "name": "cpu-dom.js",
            "modules": {},
            "classes": {
                "[cpu-dom.js]": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "cpu.js": {
            "name": "cpu.js",
            "modules": {},
            "classes": {
                "[cpu.js]": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "[banker-dom.js]": {
            "name": "[banker-dom.js]",
            "shortname": "[banker-dom.js]",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "banker-dom.js",
            "line": 1,
            "description": "author [luo0412]\ndate [2016-12-21]\ndescription [银行家算法的dom操作]",
            "is_constructor": 1
        },
        "[banker.js]": {
            "name": "[banker.js]",
            "shortname": "[banker.js]",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "banker.js",
            "line": 1,
            "description": "author [luo0412]\ndate [2016-12-21]\ndescription [银行家算法的js代码]",
            "is_constructor": 1
        },
        "[common.js]": {
            "name": "[common.js]",
            "shortname": "[common.js]",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "common.js",
            "line": 1,
            "description": "author luo0412\ndate 2016-09-11\ndescription 公共函数库，可复用",
            "is_constructor": 1
        },
        "[cpu-dom.js]": {
            "name": "[cpu-dom.js]",
            "shortname": "[cpu-dom.js]",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "cpu-dom.js",
            "line": 1,
            "description": "author [luo0412]\ndate [2016-12-21]\ndescription [cpu调度的dom操作]",
            "is_constructor": 1
        },
        "[cpu.js]": {
            "name": "[cpu.js]",
            "shortname": "[cpu.js]",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "cpu.js",
            "line": 1,
            "description": "author [luo0412]\ndate [2016-12-21]\ndescription [cpu调度有关js代码]",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "banker-dom.js",
            "line": 62,
            "itemtype": "method",
            "name": "[clearBankerTable]",
            "description": "[清空银行家算法表格所有数据]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 71,
            "itemtype": "method",
            "name": "[clearAvailableOfBankerTable]",
            "description": "[清空银行家算法表格中availa列数据]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 82,
            "itemtype": "method",
            "name": "[updateBankerInput]",
            "description": "[初始化或更新input的值]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 93,
            "itemtype": "method",
            "name": "[updateBankerTextarea]",
            "description": "[初始化或更新银行家算法的textarea]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 102,
            "itemtype": "method",
            "name": "[updateBankerTable]",
            "description": "[初始化或更新银行家算法的table,显示max,allocation和need]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 116,
            "itemtype": "method",
            "name": "[convertVectorToArr]",
            "description": "[将请求向量字符串转化成浮点型的数组]",
            "params": [
                {
                    "name": "str",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 131,
            "itemtype": "method",
            "name": "[addAvailableToBankerTable]",
            "description": "[显示或更新银行家表格的available列]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 182,
            "itemtype": "method",
            "name": "[bankerDemo1Init]",
            "description": "[导入教材示例1]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 213,
            "itemtype": "method",
            "name": "[bankerDemo2Init]",
            "description": "[导入教材示例2]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 243,
            "itemtype": "method",
            "name": "[bankerManualInit]",
            "description": "[指定资源数、进程数、AVAILABLE,其他数据随机]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker-dom.js",
            "line": 263,
            "itemtype": "method",
            "name": "[bankerRandInit]",
            "description": "[所有数据随机生成]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker-dom.js]"
        },
        {
            "file": "banker.js",
            "line": 28,
            "itemtype": "method",
            "name": "[generateOrderStr]",
            "description": "[生成顺序字符串,用于生成POSS_ORDER_ARR]",
            "params": [
                {
                    "name": "num",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 42,
            "itemtype": "method",
            "name": "[generatePossOrderArr]",
            "description": "[递归生成POSS_ORDER_ARR]",
            "params": [
                {
                    "name": "s",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    generatePossOrderArr(\"\"); // 返回整型二维数组"
            ],
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 68,
            "itemtype": "method",
            "name": "[resetGlobalVar]",
            "description": "[重置全局变量, 在初始化时调用]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 93,
            "itemtype": "method",
            "name": "[generateRandMaxAllocation]",
            "description": "[随机初始化MAX和ALLOCATION]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 116,
            "itemtype": "method",
            "name": "[generateRandAvailable]",
            "description": "[随机初始化AVAILABLE]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 128,
            "itemtype": "method",
            "name": "[isNeedSafe]",
            "description": "[判断现有资源AVAILABLE_COPY是否小于某进程NEED]",
            "params": [
                {
                    "name": "pos",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 145,
            "itemtype": "method",
            "name": "[updateAvailableCopy]",
            "description": "[更新AVAILABLE_COPY]",
            "params": [
                {
                    "name": "pos",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "class": "[banker.js]"
        },
        {
            "file": "banker.js",
            "line": 158,
            "itemtype": "method",
            "name": "[generateSafeSequence]",
            "description": "[计算所有安全序列]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[banker.js]"
        },
        {
            "file": "common.js",
            "line": 9,
            "itemtype": "method",
            "name": "[isArrAllTrue]",
            "description": "[判断一个数组的元素是否全为true]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "example": [
                "\n    console.log(isArrAllTrue([true, false, true])); // false\n    console.log(isArrAllTrue([true, true, true]));  // true"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 27,
            "itemtype": "method",
            "name": "[isArrAllZero ]",
            "description": "[判断一个数组的元素是否全为0]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "example": [
                "\n    console.log(isArrAllZero([0, 9, 0])); // false\n    console.log(isArrAllZero([0, 0, 0])); // true"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 46,
            "itemtype": "method",
            "name": "[getExecOrderStr]",
            "description": "[ 执行顺序数组转化成字符串]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    console.log(getExecOrderStr([0, 2, 1, 3])); // p0->p2->p1->p3"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 67,
            "itemtype": "method",
            "name": "[getSubArr]",
            "description": "[ 数组作差得到的arr 例arr1 - arr2]",
            "params": [
                {
                    "name": "arr1",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "arr2",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    console.log(getSubArr([6, 4.2, 2], [4, 1, 6]));"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 84,
            "itemtype": "method",
            "name": "[getSubArr2D]",
            "description": "[ 数组作差得到的arr2D 例arr1 - arr2]",
            "params": [
                {
                    "name": "arr1",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "arr2",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 105,
            "itemtype": "method",
            "name": "[getDivArr]",
            "description": "[ 数组作商得到的arr 例arr1 / arr2]",
            "params": [
                {
                    "name": "arr1",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "arr2",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    console.log(getDivArr([6, 4, 2], [4, 1, 6]));"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 123,
            "itemtype": "method",
            "name": "[getAvgValOfArr]",
            "description": "[获取数组的平均值]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[float]"
            },
            "example": [
                "\n     console.log( \"getAvgValOfArr : \" + getAvgValOfArr([1, 5, 8]) );"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 141,
            "itemtype": "method",
            "name": "[getMinValOfArr]",
            "description": "[获取一维数组最小值]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 158,
            "itemtype": "method",
            "name": "[getMaxValOfArr]",
            "description": "[获取一维数组最大值]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 175,
            "itemtype": "method",
            "name": "[arr2DParseFloat]",
            "description": "[二维数组全部元素转化成float类型]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 193,
            "itemtype": "method",
            "name": "[arrParseFloat]",
            "description": "[一维数组全部元素转化成float类型]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 208,
            "itemtype": "method",
            "name": "[arrParseInt]",
            "description": "[一维数组全部元素转化成int类型]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 225,
            "itemtype": "method",
            "name": "[arr2DToFixedN]",
            "description": "[将二维数组各个固定小数点后位数]",
            "params": [
                {
                    "name": "n",
                    "description": "[元素都为number的二维数组]",
                    "type": "[arr]"
                },
                {
                    "name": "n",
                    "description": "[int, 小数点后固定的位数]",
                    "type": "[number]"
                }
            ],
            "return": {
                "description": "[str二维数组]",
                "type": "[arr]"
            },
            "example": [
                "\n    var a = [[\"1.233333\", 2], [4,5], [5, 78, 9], [9, 0]];\n    displayArr2D(arr2DToFixedN(arr2DParseFloat(a), 3));\n    // output:\n    // 1.233   2.000\n    // 4.000   5.000\n    // 5.000   78.000  9\n    // 9.000   0.000",
                "\n    console.log(typeof arr2DParseFloat(a)[0][0]); // number\n    console.log(typeof arr2DToFixedN(arr2DParseFloat(a), 3)[0][0]); // string"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 253,
            "itemtype": "method",
            "name": "[arrToFixedN]",
            "description": "[将一维数组各个固定小数点后位数]",
            "params": [
                {
                    "name": "n",
                    "description": "[元素都为number的二维数组]",
                    "type": "[arr]"
                },
                {
                    "name": "n",
                    "description": "[int, 小数点后固定的位数]",
                    "type": "[number]"
                }
            ],
            "return": {
                "description": "[str二维数组]",
                "type": "[arr]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 269,
            "itemtype": "method",
            "name": "[cloneArr]",
            "description": "[复制一维数组]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 283,
            "itemtype": "method",
            "name": "[cloneArr2D]",
            "description": "[复制二维数组]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 302,
            "itemtype": "method",
            "name": "[displayArr]",
            "description": "打印一维数组,测试用",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 316,
            "itemtype": "method",
            "name": "[displayArr2D]",
            "description": "打印二维数组,测试用",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 334,
            "itemtype": "method",
            "name": "[getReciprocalArr]",
            "description": "[将一维数组各元素取倒数后得到的数组]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    var arr = getReciprocalArr([1,2,3]);\n    displayArr( arr );\n    arr = arrToFixedN( arr, 3 );\n    displayArr( arr);"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 354,
            "itemtype": "method",
            "name": "[getNumFloorOfArr]",
            "description": "[找出数组中比num大的最小元素]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "num",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 380,
            "itemtype": "method",
            "name": "[getRandIntBetweenAB]",
            "description": "[ 获取[A,B]的随机整数 ]",
            "params": [
                {
                    "name": "A",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "B",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    console.log(getRandIntBetweenAB(2, 10));"
            ],
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 393,
            "itemtype": "method",
            "name": "[getRandArr2D]",
            "description": "[ 生成二维数组arr[x][y] ]",
            "params": [
                {
                    "name": "x",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "y",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[common.js]"
        },
        {
            "file": "common.js",
            "line": 427,
            "itemtype": "method",
            "name": "[getIndexOfAscendSortArr]",
            "description": "[值排序后输出值排序的下标]",
            "params": [
                {
                    "name": "arr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "example": [
                "\n    console.log(getIndexOfAscendSortArr([2, 1, 3, 4])); // [ 1, 0, 2, 3 ]"
            ],
            "class": "[common.js]"
        },
        {
            "file": "cpu.js",
            "line": 27,
            "itemtype": "method",
            "name": "[resetCpuGloabalVar]",
            "description": "[重置CPU调度算法的全局变量]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 53,
            "itemtype": "method",
            "name": "[getSjfNextIndex]",
            "description": "[获取下一个执行的进程号]",
            "params": [
                {
                    "name": "arr1",
                    "description": "[优先级, 数字越大越高, 这里指的是剩余服务时间的倒数]",
                    "type": "[array]"
                },
                {
                    "name": "arr2",
                    "description": "[获取获取arr2中不为false,且在arr1种的最大数的下标]",
                    "type": "[array]"
                },
                {
                    "name": "arr3",
                    "description": "[执行完毕状态]",
                    "type": "[array]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 86,
            "itemtype": "method",
            "name": "[seizedSjf]",
            "description": "[短作业优先调度 - 抢占式]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 174,
            "itemtype": "method",
            "name": "[fcfsDemoInit]",
            "description": "[导入fcfs,sjf,phf调度算法的初始数据]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 192,
            "itemtype": "method",
            "name": "[sjfLauncher]",
            "description": "[启动sjf抢占式调度]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 216,
            "itemtype": "method",
            "name": "[hrrf]",
            "description": "[执行最高响应比调度]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 269,
            "itemtype": "method",
            "name": "[getHrrfRatio]",
            "description": "[获取最高响应比进程下标]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 298,
            "itemtype": "method",
            "name": "[hrrfDemoInit]",
            "description": "[导入响应比测试数据]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 326,
            "itemtype": "method",
            "name": "[fcfs]",
            "description": "[先来先服务调度]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        },
        {
            "file": "cpu.js",
            "line": 355,
            "itemtype": "method",
            "name": "[phf]",
            "description": "[优先级调度, 待完善]",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "[cpu.js]"
        }
    ],
    "warnings": []
}